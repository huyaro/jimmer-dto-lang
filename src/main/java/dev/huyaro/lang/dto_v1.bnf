{
  parserClass="dev.huyaro.lang.parser.DtoParser"
  parserUtilClass="dev.huyaro.lang.parser.DtoParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Dto"
  psiImplClassSuffix="Impl"
  psiPackage="dev.huyaro.lang.psi"
  psiImplPackage="dev.huyaro.lang.psi.impl"
  psiImplUtilClass="dev.huyaro.lang.psi.impl.DtoPsiImplUtil"

  elementTypeHolderClass="dev.huyaro.lang.psi.DtoTypes"
  elementTypeClass="dev.huyaro.lang.psi.DtoElementType"
  tokenTypeClass="dev.huyaro.lang.psi.DtoTokenType"

  tokens=[
    LBRACE       =  "{"
    RBRACE       =  "}"
    LBRACK       =  "["
    RBRACK       =  "]"
    LPAREN       =  "("
    RPAREN       =  ")"
    AT           = '@'
    HASH         = '#'
    EQUAL        = '='
    OPTNULL      = '?'
    CARET        = '^'
    DOLOR        = '$'
    COLON        = ':'
    STAR         = '*'
    MINUS        = '-'
    RIGHT_ARROW  = '->'
    ABSTRACT     = 'abstract'
    INPUT        = 'input'
    IMPORT       = 'import'
    AS           = 'as'

    space='regexp:\s+'
    id="regexp:\w+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    number="regexp:\d+"
    block_comment="regexp:/\*(.|\n)*?\*/"
    line_comment="regexp://.*\n"
    class_name="regexp:\w+(\.\w+)*"
  ]

}

file ::= importDeclare typeDeclare
importDeclare ::= importSpec*
importSpec ::= IMPORT class_name {pin=1}

typeDeclare ::= typeBlock*
typeBlock ::= keyWord* classSpec '{' properties '}' {pin=3}

keyWord ::= ABSTRACT|INPUT
classSpec ::= id extendSpec?
private extendSpec ::= ':' id (',' id)*

properties ::= property* { recoverWhile=property_recover}
property ::= compositeProp
        | funcAsProp
        | funcFlatProp
        | funcIdProp
        | atProp
        | allScalarsProp
        | negativeProp
        | renameProp
        | normalProp {
            mixin="dev.huyaro.lang.psi.impl.DtoNamedElementImpl"
            implements="dev.huyaro.lang.psi.DtoNamedElement"
            methods=[getKey getValue getName setName getNameIdentifier getPresentation]
        }
private property_recover ::= !('}')

// #allScalars 声明
allScalarsProp ::= '#allScalars' parameter? {pin=1}
// 负属性声明
negativeProp ::= '-' id {pin=1}
// 正常属性声明
normalProp ::= id '?'? {pin=1}
// 重命名属性声明
renameProp ::= id 'as' id {pin=2}
// 自定义注解声明
atProp ::= atSpec variableSpec
private atSpec ::= '@' id parametersAssign?
// 函数id()声明
funcIdProp ::= 'id' parameter ('as' id)?
// 函数flat()声明
funcFlatProp ::= 'flat' parameter '{' flatPermitProp+ '}'
private flatPermitProp ::= funcAsProp|funcFlatProp
// 函数as()声明
funcAsProp ::= 'as' '(' asSpec '->' id? ')' '{' normalPermitProp+ '}'
private asSpec ::= CARET? id? DOLOR?
private normalPermitProp ::= allScalarsProp|normalProp|negativeProp
// 复杂属性声明
compositeProp ::= id '{' properties '}' STAR?

// 公共属性定义
parameter ::= '(' (id (',' id)* )? ')'
variableSpec ::= id ':' id '?'?
variableAssign ::= id '=' string
parametersAssign ::= '(' variableAssign (',' variableAssign)* ')'